set nocompatible
set encoding=utf-8

if has('termguicolors')
    set termguicolors
else
    set t_Co=256
endif

"--------general------------------------------------------------------------------------

set title
set backspace=indent,eol,start
set showcmd
set gcr=a:blinkon0
set autoread

set guifont=FiraCode\ Nerd\ Font\ Mono:h12
set visualbell
set hidden
set confirm
set splitbelow
set splitright
set mouse=a
set hidden
set clipboard=unnamedplus
set fillchars=vert:│,fold:-,eob:~,lastline:@
syntax on 

let mapleader = ";"

" -----------------------------------------------------------------------------
"configuração de arquivos e buffers
set path=.,**
set noswapfile
set nobackup
set undodir=~/.vim/undodir
set undofile

"-----------------------------------------------------------------------------
"exibição
set nowrap
set linebreak
set nolist
set listchars=tab:›-,space:·,trail:◀,eol:↲
set number
set relativenumber
set scrolloff=2
set cursorline

"colors
colorscheme habamax

hi Normal guibg=NONE ctermbg=NONE
hi CursorLine guibg=#202130
hi Comment cterm=italic gui=italic

set noshowmode
set laststatus=2


hi statusline   cterm=NONE ctermfg=0 ctermbg=7   guibg=#C1C2D0 guifg=#000000
hi statuslinenc cterm=NONE ctermfg=0 ctermbg=240 guibg=#616270 guifg=#000000

augroup ModeEvents
    autocmd!
    au InsertEnter * hi statusline cterm=NONE ctermfg=0 ctermbg=10 guibg=#7BC86F
    au InsertLeave * hi statusline cterm=NONE ctermfg=0 ctermbg=7 guibg=#C1C2D0
    au ModeChanged *:[vV\x16]* hi statusline cterm=NONE ctermfg=0 ctermbg=13 guibg=#C990DC
    au Modechanged [vV\x16]*:* hi statusline cterm=NONE ctermfg=0 ctermbg=7 guibg=#C1C2D0
augroup end

"menu 
" -- Accept with right arrow or enter --
inoremap <expr> <right> pumvisible() ? '<c-y>' : '<right>'
inoremap <expr> <cr> pumvisible() ? '<c-y>' : '<cr>'

" -- Cancel completion with left arrow --
inoremap <expr> <left> pumvisible() ? '<c-e>' : '<left>'

set wildmenu
set wildmode=longest,full
set wildoptions=pum

" -----------------------------------------------------------------------------
hi Normal guibg=NONE ctermbg=NONE

hi CursorLine guibg=#202130

hi Comment cterm=italic gui=italic

hi VertSplit ctermbg=NONE guibg=NONE ctermfg=7 guifg=#c1c2d0

hi TabLine      guifg=#9192a0 guibg=#303140 gui=none
hi TabLineSel   guifg=#a1a2b0 guibg=#101120 gui=bold
hi TabLineFill  guifg=#9192a0 guibg=#303140 gui=none

hi Visual guifg=NONE guibg=#303140


"-----------------------------------------------------------------------------
"identation
set autoindent
set smartindent
set smarttab
set shiftwidth=2
set softtabstop=2
set tabstop=2
set expandtab

" Auto indent pasted text
nnoremap p p=`]<C-o>
nnoremap P P=`]<C-o>


set ignorecase
set smartcase
set incsearch
set hls
let @/ = ""
set shortmess+=c
set completeopt=menuone,longest

" ----------------------------------------------------------------------------
" Plugins
call plug#begin()


Plug 'ryanoasis/vim-devicons'
Plug 'preservim/nerdtree'
Plug 'junegunn/fzf', {'do':{-> fzf#install()}}
Plug 'junegunn/fzf.vim'
Plug 'mhinz/vim-startify'
Plug 'stephpy/vim-yaml'
Plug 'tpope/vim-surround'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'SirVer/ultisnips'
Plug 'sheerun/vim-polyglot'
Plug 'shime/vim-livedown'
Plug 'junegunn/vim-easy-align'
Plug 'neoclide/coc.nvim', {'branch': 'release'}


":CocInstall coc-json coc-tsserver
"https://javadev.org/devtools/ide/neovim/coc/

"adicionar plugins para java e rust 

"Java
Plug 'artur-shaik/vim-javacomplete2'


" Javascript/Typescript
Plug 'pangloss/vim-javascript'
Plug 'leafgarland/typescript-vim'

" Testing
Plug 'janko/vim-test'
Plug 'victormours/vim-rspec'
Plug 'benmills/vimux'
"add vimspector

Plug 'tpope/vim-dispatch'

call plug#end()

" Better search
set hlsearch
set incsearch

" Wildignore for search
set wildignore+=.keep,*.beam,*.class,*.jar,*.sql,*/vendor/bundle/*,*/target/*,*/coverage/*,*/yacat-repos/*,*/tmp/*,*/log/*,*/_site/*,*/node_modules/*,*/dist/*,*/deps/*,*/__snapshots__/*,*/cypress/data/*

autocmd BufReadPre,FileReadPre *.md :set wrap

autocmd FocusLost * silent! wa " 


autocmd VimResized * wincmd = " 

"airline
set laststatus=2
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline_statusline_ontop=0
let g:airline_theme='base16_classic_dark'
let g:airline#extensions#tabline#formatter = 'default'
let g:airline#extensions#whitespace#enabled = 0

" Configuração do UltiSnips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsSnippetDirectories=["UltiSnips", "my_custom_snippets", "python", "java", "C"]

" Tree configuration
let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:NERDTreeHijackNetrw = 0
let g:NERDTreeWinSize=60
let g:NERDTreeStatusline = '%#NonText#'
"let NERDTreeQuitOnOpen = 1
let NERDTreeAutoDeleteBuffer = 1
let NERDTreeIgnore=['\.o$', '\~$', 'node_modules', 'cypress/data', 'dist']
autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
"autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" Prevent opening file inside NERDTree
au BufEnter * if bufname('#') =~ 'NERD_tree' && bufname('%') !~ 'NERD_tree' && winnr('$') > 1 | b# | exe "normal! \<c-w>\<c-w>" | :blast | endif

"nnoremap <silent> <leader>n :NERDTreeToggle<CR>
map<C-n> :NERDTreeToggle<CR>

nnoremap <silent> <leader>k :NERDTreeFind<CR>

" Customize Fzf
"dar uma olhada  depois
function! s:build_quickfix_list(lines)
  call setqflist(map(copy(a:lines), '{ "filename": v:val }'))
  copen
  cc
endfunction

let g:fzf_action = {
  \ 'ctrl-q': function('s:build_quickfix_list'),
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

let $FZF_DEFAULT_OPTS = '--bind ctrl-a:select-all'

let rgignore = '**/node_modules/*,**/.git/*,**/vendor/assets/*,**/vendor/bundle/*,**/public/assets/*,**/public/packs/*,**/public/fonts/*,*.sql,*.csv,*.log,**/.keep,*.json'

function! RipgrepFzf(query, fullscreen)
  let command_fmt = 'rg --column --line-number --hidden --follow --no-heading --color=always --smart-case --glob "!{rgignore}" -- %s || true'
  let initial_command = printf(command_fmt, shellescape(a:query))
  let reload_command = printf(command_fmt, '{q}')
  let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
  call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction
command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)

command! -bang -nargs=? -complete=dir Files
			\ call fzf#run(fzf#wrap({'source': 'rg --files --hidden --follow', 'down': '40%'}))

nnoremap <silent> <C-p> :Files<CR>
nnoremap <silent> <C-i> :Buffers<CR>
nnoremap <silent> <C-f> :RG<CR>

" Rspec configuration
map <silent> <leader>tf :TestFile -strategy=vimux<CR>
map <silent> <leader>tn :TestNearest -strategy=vimux<CR>
map <silent> <leader>tl :TestLast -strategy=vimux<CR>
map <silent> <leader>ta :TestSuite -strategy=vimux<CR>

"Java config
autocmd FileType java setlocal omnifunc=javacomplete#Complete

nmap <leader>jI <Plug>(JavaComplete-Imports-AddMissing)
  nmap <leader>jR <Plug>(JavaComplete-Imports-RemoveUnused)
  nmap <leader>ji <Plug>(JavaComplete-Imports-AddSmart)
  nmap <leader>jii <Plug>(JavaComplete-Imports-Add)

  imap <C-j>I <Plug>(JavaComplete-Imports-AddMissing)
  imap <C-j>R <Plug>(JavaComplete-Imports-RemoveUnused)
  imap <C-j>i <Plug>(JavaComplete-Imports-AddSmart)
  imap <C-j>ii <Plug>(JavaComplete-Imports-Add)

  nmap <leader>jM <Plug>(JavaComplete-Generate-AbstractMethods)

  imap <C-j>jM <Plug>(JavaComplete-Generate-AbstractMethods)

  nmap <leader>jA <Plug>(JavaComplete-Generate-Accessors)
  nmap <leader>js <Plug>(JavaComplete-Generate-AccessorSetter)
  nmap <leader>jg <Plug>(JavaComplete-Generate-AccessorGetter)
  nmap <leader>ja <Plug>(JavaComplete-Generate-AccessorSetterGetter)
  nmap <leader>jts <Plug>(JavaComplete-Generate-ToString)
  nmap <leader>jeq <Plug>(JavaComplete-Generate-EqualsAndHashCode)
  nmap <leader>jc <Plug>(JavaComplete-Generate-Constructor)
  nmap <leader>jcc <Plug>(JavaComplete-Generate-DefaultConstructor)

  imap <C-j>s <Plug>(JavaComplete-Generate-AccessorSetter)
  imap <C-j>g <Plug>(JavaComplete-Generate-AccessorGetter)
  imap <C-j>a <Plug>(JavaComplete-Generate-AccessorSetterGetter)

  vmap <leader>js <Plug>(JavaComplete-Generate-AccessorSetter)
  vmap <leader>jg <Plug>(JavaComplete-Generate-AccessorGetter)
  vmap <leader>ja <Plug>(JavaComplete-Generate-AccessorSetterGetter)

  nmap <silent> <buffer> <leader>jn <Plug>(JavaComplete-Generate-NewClass)
  nmap <silent> <buffer> <leader>jN <Plug>(JavaComplete-Generate-ClassInFile)


"Mais config de plug
" ----------------------------------------------------------------------------
"Comando e atalhos

" navegação entre os buffers
nnoremap <C-J> :bn<cr>
nnoremap <C-K> :bp<cr>
nnoremap <c-x> :bp\|bd #<cr>
" Go to tab by number
noremap <leader>1 1gt
noremap <leader>2 2gt
noremap <leader>3 3gt
noremap <leader>4 4gt
noremap <leader>5 5gt
noremap <leader>6 6gt
noremap <leader>7 7gt
noremap <leader>8 8gt
noremap <leader>9 9gt
noremap <leader>0 :tablast<cr>
"noremap <leader>x :tabclose<cr>

inoremap <leader>; <Esc>

" Go to last active tab

au TabLeave * let g:lasttab = tabpagenr()
nnoremap <silent> <leader>b :exe "tabn ".g:lasttab<cr>
vnoremap <silent> <leader>b :exe "tabn ".g:lasttab<cr>

nnoremap <leader> <expr> gb '`[' . strpart(getregtype(), 0, 1) . '`]'
nnoremap <leader>r :source %<CR>
nnoremap <leader>pi :PlugInstall<CR>
noremap <leader>q :q<CR>
noremap <leader>w :w<CR>
noremap <leader>qq :qa!<CR>
noremap <leader>z :nohl<CR>
noremap <leader>sp :set paste<CR>
noremap <leader>snp :set nopaste<CR>

nmap <silent> <C-s> :w<CR>
imap <silent> <C-s> <Esc>:w<CR>

nmap <leader>pbp :set paste<CR>:r !pbpaste<CR>:set nopaste<CR>
imap <leader>pbp <Esc>:set paste<CR>:r !pbpaste<CR>:set nopaste<CR>
nmap <leader>pby :.w !pbcopy<CR><CR>
vmap <leader>pby :w !pbcopy<CR><CR>

noremap <leader>aa :call VimuxRunCommand("clear; bundle exec rake test")<CR>
noremap <leader>ai :call VimuxRunCommand("clear; bundle exec ruby -r ./test/test_helper " . bufname("%"))<CR>
noremap <leader>ae :call VimuxRunCommand("clear; bundle exec rake e2e")<CR>
